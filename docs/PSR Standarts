<<<<<PSR-1>>>>>

1. Long tags(<?php ?>) and short echo tags(<?= ?>)!
2. Character encoding of files must be UTF-8
3. PHP files should
     -declare classes, functions, constants, etc.
     OR
     -should execute logic with side effects(generating output, explicit use of require or include,
     connecting to external services, modifying ini settings, emmiting errors or execptions, modifying
     global or static variables, reading from or writing to a file, and so on)
4. Namespaces and Classes must follow PSR-0 or PSR-4 - use studly caps(captital letter for each new word)
5. Methods need to use camel case

<<<<<PSR-2>>>>>

1. To be PSR2 compliant, you also have to follow the rules in PSR1
2. Code must use four spaces for indenting not tabs
3. There is no hard limit on line length, but soft limit must be 120 characters, and lines should be
   80 characters or less
4. There must be one blank line after the name-space declaration and after block of use declarations
5. Opening and closing braces {also called curly brackets*} for classes,methods must go on the next line
6. Visibility must be declared on all properties and methods.
7. Abstract and final must be declared before the visibility
8. Static must be declared after the visibility.
9. Control structure keywords(if,else,switch,do,while,foreach) must have one space after them(before opening brace)
10. Method and function call must not have space after them
11. Opening braces for control structures must go on the same line and closing braces must go on the next line
12. Opening parenthesis for control structures must not have space after them
13. Closing parenthesis for control structures must not have space before them


*Brackets include round brackets/parentheses, square brackets, curly brackets, angle brackets,
and various other pairs of symbols. In addition to referring to the class of all types of brackets,
the unqualified word bracket is most commonly used to refer to a specific type of bracket.

<<<<<PSR-3>>>>> was developed to standardize the interfaces for basic logging interactions
1.The LoggerInterface exposes eight methods to write logs to the eight RFC 5424 levels:

Emergency – the system is unusable
Alert – immediate action is required
Critical – critical conditions
Error – errors that do not require immediate attention but should be monitored
Warning – unusual or undesirable occurrences that are not errors
Notice – normal but significant events
Info – interesting events
Debug – detailed information for debugging purposes
